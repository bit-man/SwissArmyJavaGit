Write clearly - don't be too clever.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Say what you mean, simply and directly.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use library functions.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Avoid temporary variables.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Write clearly - don't sacrifice clarity for "efficiency".<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Let the machine do the dirty work.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Replace repetitive expressions by calls to a common function.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Parenthesise to avoid ambiguity.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Choose variable names that won't be confused.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Avoid unnecessary branches.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use the good features of a language; avoid the bad ones.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't use conditional branches as a substitute for a logical expression.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use the "telephone test" for readability.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make your program read from top to bottom.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use the fundamental control flow constructs.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Write first in an easy-to-understand pseudo-language; then translate into whatever language you have to use.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Follow each decision as closely as possible with its associated action.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use data arrays to avoid repetitive control sequences.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Choose a data representation that makes the program simple.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't stop with your first draft.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Modularise.  Use subroutines.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make the coupling between modules visible.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Each module should do one thing well.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make sure every module hides something.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Let the data structure the program.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't patch bad code - rewrite it.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Write and test a big program in small pieces.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use recursive procedures for recursively-defined data structures.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Test input for validity and plausibility.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make sure input cannot violate the limits of the program.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Terminate input by end-of-file or marker, not by count.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Identify bad input; recover if possible.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Treat end of file conditions in a uniform manner.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make input easy to prepare and output self-explanatory.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use uniform input formats.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make input easy to proofread.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use free-form input when possible.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use self-identifying input.  Allow defaults.  Echo both on output.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Localise input and output in subroutines.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make sure all variables are initialised before use.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't stop at one bug.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use debugging compilers.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Initialise constants with DATA statements or INITIAL attributes; initialise variables with executable code.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Watch out for off-by-one errors.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Take care to branch the right way on equality.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Avoid multiple exits from loops.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make sure your code "does nothing" gracefully.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Test programs at their boundary values.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Program defensively.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
10.0 times 0.1 is hardly ever 1.0.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't compare floating point numbers just for equality.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make it right before you make it faster.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Keep it right when you make it faster.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make it clear before you make it faster.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't sacrifice clarity for small gains in "efficiency".<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Let your compiler do the simple optimisations.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't strain to re-use code; reorganise instead.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make sure special cases are truly special.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Keep it simple to make it faster.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't diddle code to make it faster - find a better algorithm.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Instrument your programs.  Measure before making "efficiency" changes.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Make sure comments and code agree.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't just echo the code with comments - make every comment count.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't comment bad code - rewrite it.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use variable names that mean something.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Use statement labels that mean something.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Format a program to help the reader understand it.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Indent to show the logical structure of a program.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Document your data layouts.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
Don't over-comment.<br />  - The Elements of Programming Style (Kernighan &amp; Plaugher)
