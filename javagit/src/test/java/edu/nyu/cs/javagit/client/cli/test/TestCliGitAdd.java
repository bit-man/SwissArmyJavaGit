package edu.nyu.cs.javagit.client.cli.test;


import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import edu.nyu.cs.javagit.api.commands.GitAddResponse;
import edu.nyu.cs.javagit.client.cli.CliGitAdd;

public class TestCliGitAdd {

  @Before
  public void setUp() throws Exception {
  }
   
  /**
   * Test for NullPointerException
   * @throws IOException
   */
  @Test(expected=NullPointerException.class)
  public void testGitAddNoFilesProvided() throws IOException{
    CliGitAdd gitAdd = new CliGitAdd();
    List<String> options = null;
    List<String> fileNames = null;
    gitAdd.add("/home/gsd216/osp2008/git", options, fileNames);
  }
  
  /**
   * Test for testing IOException
   * @throws IOException thrown if file paths or repository path provided
   *   is found or git command is not found.
   */
  @Test(expected=IOException.class)
  public void testGitAddIOExceptionThrown() throws IOException{
    CliGitAdd gitAdd = new CliGitAdd();
    List<String> options = null;
    List<String> fileNames = new ArrayList<String>();
    fileNames.add("testFile");
    gitAdd.add("/foo/tmp", options, fileNames);
  }
  
  /**
   * Test for testing IllegalArgumentException
   * @throws IOException thrown if file paths or repository path provided
   *   is found or git command is not found.
   */
  @Test(expected=IllegalArgumentException.class)
  public void testGitAddIllegalArgumentRepositoryPath() throws IOException{
    CliGitAdd gitAdd = new CliGitAdd();
    List<String> options = null;
    List<String> fileNames = new ArrayList<String>();
    fileNames.add("testFile");
    gitAdd.add("", options, fileNames);
  }
  
  /**
   * Test for parsing the a valid output generated after a couple of
   * files are added to the repository. The output starts with 'add'.
   */
  @Test
  public void testGitAddParserValidInput() {
    CliGitAdd gitAdd = new CliGitAdd();
    CliGitAdd.GitAddParser parser = gitAdd.new GitAddParser();
    parser.parseLine("add 'test-repository/eg9'");
    parser.parseLine("add 'test-repository/testdir/foo'");
    GitAddResponse response = parser.getResponse();
    assertEquals("No of lines in output does not match", 2, response.getFileListSize());
    assertEquals("File add to repository does not match", "'test-repository/eg9'", response.get(0));
    assertEquals("File add to repository does not match", "'test-repository/testdir/foo'", response.get(1));
    
  }
  
  /**
   * This is a test for adding a file to the git repository that
   * is non-existing. 
   * Test verifies that error condition is raised in the <code>GitAddResponse</code>
   * and error string is saved.
   * <p>
   * e.g. 
   * git-add ./foobar001
   * fatal: pathspec 'test-repository/foobar001' did not match any files
   * <p>
   * In the above example the file foobar001 is file that is not physically
   * existing inside the repository and this test parsed the error message
   * generated by the git-add command.
   */
  @Test
  public void testGitAddParserNonExistantFile() {
    CliGitAdd gitAdd = new CliGitAdd();
    CliGitAdd.GitAddParser parser = gitAdd.new GitAddParser();
    parser.parseLine("fatal: pathspec 'test-repository/foobar001' did not match any files");
    GitAddResponse response = parser.getResponse();
    assertTrue(response.inErrorState());
    assertEquals(response.getError(), "fatal: pathspec 'test-repository/foobar001' did not match any files");
  }
  
  /**
   * This test is for git-add command without verbose flag. If a file is add
   * using git-add without '-v' option then it will get added without any
   * output.
   */
  @Test
  public void testGitAddParserAddValidFileNonVerbose() {
    CliGitAdd gitAdd = new CliGitAdd();
    CliGitAdd.GitAddParser parser = gitAdd.new GitAddParser();
    parser.parseLine(null);
    parser.parseLine("");
    GitAddResponse response = parser.getResponse();
    assertTrue(response.noOutput());
    assertEquals("No options used on command line", response.getOptions().size(), 0 );
    assertEquals("File List size does not match", response.getFileListSize(), 0);
  }

}
