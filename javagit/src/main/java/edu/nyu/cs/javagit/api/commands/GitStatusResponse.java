package edu.nyu.cs.javagit.api.commands;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public abstract class GitStatusResponse implements CommandResponse {
  
  /**
   * List of new files that will be added next time
   * <git-commit> is executed.
   */
  protected final List<String> newFilesToCommit;
  /**
   * List of files that will be deleted next time git-commit
   * is executed.
   */
  protected final List<String> deletedFilesToCommit;
  /**
   * List of files that are modified and will be committed
   * to git repository next time git-commit is executed.
   */
  protected final List<String> modifiedFilesToCommit;
  /**
   * List of files that are in git-repository and have been 
   * deleted locally.
   */
  protected final List<String> deletedFilesNotUpdated;
  /**
   * List of files that are in git-repository and have
   * been modified locally but not yet added to git
   * by <git-add> command.
   */
  protected final List<String> modifiedFilesNotUpdated;
  /**
   * List of new files that have been created locally and
   * have not been added to repository by <git-add> command
   * yet.
   */
  protected final List<String> untrackedFiles;
  /**
   * Name of the branch to which HEAD is pointint to.
   */
  protected String branch;
  /**
   * One line message that is generated by output of git-status
   * command sometimes and it does not start with a '#'.
   */
  protected String message;
  /**
   * Error message generated by <git-status> command
   */
  protected String error;
  
  public GitStatusResponse() {
    newFilesToCommit = new ArrayList<String>();
    deletedFilesToCommit = new ArrayList<String>();
    modifiedFilesToCommit = new ArrayList<String>();
    deletedFilesNotUpdated = new ArrayList<String>();
    modifiedFilesNotUpdated = new ArrayList<String>();
    untrackedFiles = new ArrayList<String>();
    branch = null;
    message = null;
    error = null;
  }
  /**
   * Get the name of the file from newFilesToCommit list
   * at a given index.
   * @param index Index in the list.
   * @return the name of the file.
   */
  public String getFileFromNewFilesToCommit(int index) {
    if ( index < 0 || index > newFilesToCommit.size()) {
      throw new IndexOutOfBoundsException("invalid index: " + index);
    }
    return newFilesToCommit.get(index);
  }
  
  /**
   * Get the name of the deleted file that will be committed
   * next time git-commit is executed currently located at
   * a given index in the list.
   * @param index Index in the list.
   * @return the name of the file.
   */
  public String getFileFromDeletedFilesToCommit(int index) {
    if ( index < 0 || index > deletedFilesToCommit.size()) {
      throw new IndexOutOfBoundsException("invalid index: " + index);
    }
    return deletedFilesToCommit.get(index);
  }
  
  /**
   * Get the name of the file that is modified and added to
   * the repository by git-add command and will be committed
   * to repository next time git-commit is executed. This
   * file is at given index in the list of the files.
   * @param index Index in the list of files.
   * @return the name of the file.
   */
  public String getFileFromModifiedFilesToCommit(int index) {
    if ( index < 0 || index > modifiedFilesToCommit.size()) {
      throw new IndexOutOfBoundsException("invalid index: " + index);
    }
    return modifiedFilesToCommit.get(index);
  }
  
  /**
   * Returns the name of the deleted file that is removed
   * locally but not yet removed from repository.
   * @param index Index in the list
   * @return the name of the file.
   */
  public String getFileFromDeletedFilesNotUpdated(int index) {
    if ( index < 0 || index > deletedFilesNotUpdated.size()) {
      throw new IndexOutOfBoundsException("invalid index: " + index);
    }
    return deletedFilesNotUpdated.get(index);
  }
  
  /**
   * Returns the name of the file that is existing in
   * the repository and has been locally modified. This file
   * is one of the files that have been locally modified and
   * is located at given index in the list.
   * @param index Index in the list of the files
   * @return the name of the file
   */
  public String getFileFromModifiedFilesNotUpdated(int index) {
    if ( index < 0 || index > modifiedFilesNotUpdated.size()) {
      throw new IndexOutOfBoundsException("invalid index: " + index);
    }
    return modifiedFilesNotUpdated.get(index);
  }
  
  /**
   * Returns the name of the new file that is created locally
   * and had not been added to the repository yet by <git-add>.
   * The returned file is at the index in the list of files
   * that are yet to be added.
   * @param index Index of the file in the list 
   * @return the name of the file
   */
  public String getFileFromUntrackedFiles(int index) {
    if ( index < 0 || index > untrackedFiles.size()) {
      throw new IndexOutOfBoundsException("invalid index: " + index);
    }
    return untrackedFiles.get(index);
  }
  
  /**
   * Gets the iterator to the list of files that are new
   * and to be committed next time git-commit is executed.
   * @return Iterator to the list.
   */
  public Iterator<String> getNewFilesToCommitIterarator() {
    return newFilesToCommit.iterator();
  }
  
  public Iterator<String> getDeletedFilesToCommitIterator() {
    return deletedFilesToCommit.iterator();
  }
  
  public Iterator<String> getModifiedFilesToCommitIterator() {
    return modifiedFilesToCommit.iterator();
  }
  
  public Iterator<String> getDeletedFilesNotUpdatedIterator() {
    return deletedFilesNotUpdated.iterator();
  }
  
  public Iterator<String> getModifiedFilesNotUpdatedIterator() {
    return modifiedFilesNotUpdated.iterator();
  }
  
  public Iterator<String> getUntrackedFiles() {
    return untrackedFiles.iterator();
  }
  
  public int getNewFilesToCommitSize() {
    return newFilesToCommit.size();
  }

  public int getDeletedFilesToCommitSize() {
    return deletedFilesToCommit.size();
  }
  
  public int getModifiedFilesToCommitSize() {
    return modifiedFilesToCommit.size();
  }
  
  public int getDeletedFilesNotUpdatedSize() {
    return deletedFilesNotUpdated.size();
  }
  
  public int getModifiedFilesNotUpdatedSize() {
    return modifiedFilesNotUpdated.size();
  }
  
  public int getUntrackedFilesSize() {
    return untrackedFiles.size();
  }

  public String getBranch() {
    return branch;
  }
  
  public String getMessage() {
    return message;
  }

  public String getError() {
    return error;
  }
}
