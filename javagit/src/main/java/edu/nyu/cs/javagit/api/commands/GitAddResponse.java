/*
 * ====================================================================
 * Copyright (c) 2008 JavaGit Project.  All rights reserved.
 *
 * This software is licensed using the GNU LGPL v2.1 license.  A copy
 * of the license is included with the distribution of this source
 * code in the LICENSE.txt file.  The text of the license can also
 * be obtained at:
 *
 *   http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 *
 * For more information on the JavaGit project, see:
 *
 *   http://www.javagit.com
 * ====================================================================
 */
package edu.nyu.cs.javagit.api.commands;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import edu.nyu.cs.javagit.utilities.CheckUtilities;

/**
 * Response data object obtained from git-add command. It contains a list of file-action pair that
 * contains the list of files that are added by the git-add command.
 * 
 * The output can also be generated by "-n" option of git-add command ( dry run ). So we have two
 * Actions for git-add command - add - for adding a file to the repository dry run - for just
 * testing the output of the command. Dry run info need to be passed back so that the receiver of
 * this object knows that the command did not actually run and was just a dry run. The git-add
 * commands that return no output will return this object with filesAdded list as empty-list.
 * 
 */
public abstract class GitAddResponse implements CommandResponse {

  /**
   * List of files added to the index by &lt;git-add&gt; command.
   */
  protected List<File> filePathsList;

  /**
   * Initially set to true as git-add many times does not generate any output at all. If output is
   * generated then it needs to be set to false. This can be used as a tester whether any output was
   * generated or not.
   */
  protected boolean noOutput;

  protected List<ResponseString> comments;

  protected boolean dryRun;

  /**
   * Constructor
   */
  public GitAddResponse() {
    filePathsList = new ArrayList<File>();
    comments = new ArrayList<ResponseString>();
    noOutput = true;
    dryRun = false;
  }

  /**
   * Gets the number of files added.
   * 
   * @return size of list.
   */
  public int getFileListSize() {
    return filePathsList.size();
  }

  public File get(int index) throws IndexOutOfBoundsException {
    if (index < filePathsList.size() && index >= 0) {
      return filePathsList.get(index);
    }
    throw new IndexOutOfBoundsException(index + " is out of range");
  }

  public boolean noOutput() {
    return noOutput;
  }

  public boolean dryRun() {
    return dryRun;
  }

  public boolean comment() {
    return (comments.size() > 0);
  }

  public int nubmerOfComments() {
    return comments.size();
  }

  public ResponseString getComment(int index) {
    CheckUtilities.checkIntInRange(index, 0, comments.size());
    return (comments.get(index));
  }

  /**
   * For saving errors, warnings and comments related information in the response object. Currently
   * it has only two fields -
   * <ul>
   * <li>Error, warning or general comment string</li>
   * <li>Line number where the string appeared in output</li>
   * <ul>
   */
  public static class ResponseString {
    final String comment;
    final int lineNumber;

    public ResponseString(int lineNumber, String comment) {
      this.lineNumber = lineNumber;
      this.comment = comment;
    }

    public int getLineNumber() {
      return lineNumber;
    }

    public String comment() {
      return comment;
    }

  }
}
