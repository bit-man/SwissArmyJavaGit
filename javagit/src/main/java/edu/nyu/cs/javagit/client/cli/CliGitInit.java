package edu.nyu.cs.javagit.client.cli;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import edu.nyu.cs.javagit.api.JavaGitConfiguration;
import edu.nyu.cs.javagit.api.JavaGitException;
import edu.nyu.cs.javagit.api.commands.CommandResponse;
import edu.nyu.cs.javagit.api.commands.GitInitOptions;
import edu.nyu.cs.javagit.api.commands.GitInitResponse;
import edu.nyu.cs.javagit.client.IGitInit;
import edu.nyu.cs.javagit.utilities.CheckUtilities;

public class CliGitInit implements IGitInit {

	public GitInitResponse init(File repoDirectory, GitInitOptions options)
	throws JavaGitException, IOException  {
		CheckUtilities.checkFileValidity(repoDirectory);
		GitInitParser parser = new GitInitParser();
		List<String> command = buildCommand(repoDirectory, options);
		GitInitResponse response =  (GitInitResponse) ProcessUtilities.runCommand(repoDirectory,
				command, parser);
		if (response.containsError()) {
			throw new JavaGitException(418001, "Git Init error");
		}
		return response;
	}

	public GitInitResponse init(File repoDirectory) 
	throws JavaGitException, IOException  {
		CheckUtilities.checkFileValidity(repoDirectory);
		GitInitParser parser = new GitInitParser();
		List<String> command = buildCommand(repoDirectory, null);
		GitInitResponse response =  (GitInitResponse) ProcessUtilities.runCommand(repoDirectory,
				command, parser);
		if (response.containsError()) {
			throw new JavaGitException(418001, "Git Init error");
		}
		return response;
	}

	/*
	 * Build the command to be executed using the Git Init method
	 */
	private List<String> buildCommand(File repoDirectory, GitInitOptions options) {
		List<String> command = new ArrayList<String>();
		command.add(JavaGitConfiguration.getGitCommand());
		command.add("init");
		if(options!=null){

			if (options.isOptBare()) {
				command.add("--bare");
			}
			if (options.isOptTemplate()) {
				command.add("--template="+options.getOptTemplateDirecory());
			}
			if (options.isOptSharedUmask()) {
				command.add("--shared=");
			}
			if (options.isOptSharedGroup()) {
				command.add("--shared="+options.getOptSharedGroupName());
			}
			if (options.isOptSharedAll()) {
				command.add("--shared=");
			}
			if (options.isOptSharedOctal()) {
				command.add("--shared="+options.getOptSharedOctalValue());
			}
		}
		return command;
	}

	/**
	 * Parser class to parse the output generated by git init and return a
	 * <code>GitInitResponse</code> object.
	 */
	public class GitInitParser implements IParser {

		private GitInitResponse response = new GitInitResponse();

		/**
		 * Add the final parsed commit. and returns the response of git init execution.
		 */
		public CommandResponse getResponse() throws JavaGitException {
			return this.response;
		}


		/**
		 *  Parses a line at a time from the commandline execution output of git init
		 */    		
		public void parseLine(String line) {
			if(line.length() == 0){
				return;
			}
			//initialized
			if (line.contains("Initialized")){
				response.setInitialized(true);
			}
			//reinitialized 
			else if (line.contains("Reinitialized") || line.contains("Initialized")){
				response.setReinitialized(true);
			}
		}

		public void processExitCode(int code) {

		}
	}	
}
